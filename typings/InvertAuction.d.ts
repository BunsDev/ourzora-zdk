/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  BigNumber,
  BigNumberish,
  ethers,
  EventFilter,
  PopulatedTransaction,
  Signer,
} from 'ethers'
import {
  CallOverrides,
  Contract,
  ContractTransaction,
  Overrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { EventFragment, FunctionFragment, Result } from '@ethersproject/abi'

interface InvertAuctionInterface extends ethers.utils.Interface {
  functions: {
    '_splitShare(tuple,tuple)': FunctionFragment
    'acceptBid(uint256,address)': FunctionFragment
    'addBidShares(uint256,tuple)': FunctionFragment
    'bidForTokenBidder(uint256,address)': FunctionFragment
    'bidSharesForToken(uint256)': FunctionFragment
    'configure(address)': FunctionFragment
    'currentAskForToken(uint256)': FunctionFragment
    'isValidBid(uint256,uint256)': FunctionFragment
    'isValidBidShares(tuple)': FunctionFragment
    'minBidForToken(uint256)': FunctionFragment
    'removeBid(uint256,address)': FunctionFragment
    'setAsk(uint256,tuple)': FunctionFragment
    'setBid(uint256,tuple)': FunctionFragment
    'tokenContract()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: '_splitShare',
    values: [
      { value: BigNumberish },
      { amount: BigNumberish; currency: string; bidder: string }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'acceptBid',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'addBidShares',
    values: [
      BigNumberish,
      {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'bidForTokenBidder',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'bidSharesForToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'configure', values: [string]): string
  encodeFunctionData(
    functionFragment: 'currentAskForToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isValidBid',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isValidBidShares',
    values: [
      {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      }
    ]
  ): string
  encodeFunctionData(functionFragment: 'minBidForToken', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'removeBid',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'setAsk',
    values: [BigNumberish, { amount: BigNumberish; currency: string }]
  ): string
  encodeFunctionData(
    functionFragment: 'setBid',
    values: [BigNumberish, { amount: BigNumberish; currency: string; bidder: string }]
  ): string
  encodeFunctionData(functionFragment: 'tokenContract', values?: undefined): string

  decodeFunctionResult(functionFragment: '_splitShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'acceptBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addBidShares', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bidForTokenBidder', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bidSharesForToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'configure', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'currentAskForToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isValidBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isValidBidShares', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minBidForToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAsk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenContract', data: BytesLike): Result

  events: {
    'AskCreated(uint256,address,uint256,address)': EventFragment
    'BidCreated(uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AskCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BidCreated'): EventFragment
}

export class InvertAuction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: InvertAuctionInterface

  functions: {
    _splitShare(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    '_splitShare(tuple,tuple)'(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    addBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addBidShares(uint256,tuple)'(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    bidForTokenBidder(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber
        currency: string
        bidder: string
        0: BigNumber
        1: string
        2: string
      }
    }>

    'bidForTokenBidder(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        amount: BigNumber
        currency: string
        bidder: string
        0: BigNumber
        1: string
        2: string
      }
    }>

    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        prevOwner: { value: BigNumber; 0: BigNumber }
        creator: { value: BigNumber; 0: BigNumber }
        owner: { value: BigNumber; 0: BigNumber }
        0: { value: BigNumber; 0: BigNumber }
        1: { value: BigNumber; 0: BigNumber }
        2: { value: BigNumber; 0: BigNumber }
      }
    }>

    'bidSharesForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        prevOwner: { value: BigNumber; 0: BigNumber }
        creator: { value: BigNumber; 0: BigNumber }
        owner: { value: BigNumber; 0: BigNumber }
        0: { value: BigNumber; 0: BigNumber }
        1: { value: BigNumber; 0: BigNumber }
        2: { value: BigNumber; 0: BigNumber }
      }
    }>

    configure(
      tokenContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'configure(address)'(
      tokenContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    currentAskForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { amount: BigNumber; currency: string; 0: BigNumber; 1: string }
    }>

    'currentAskForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: { amount: BigNumber; currency: string; 0: BigNumber; 1: string }
    }>

    isValidBid(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    'isValidBid(uint256,uint256)'(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    isValidBidShares(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    'isValidBidShares(tuple)'(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    minBidForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'minBidForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    tokenContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'tokenContract()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>
  }

  _splitShare(
    sharePercentage: { value: BigNumberish },
    bid: { amount: BigNumberish; currency: string; bidder: string },
    overrides?: CallOverrides
  ): Promise<BigNumber>

  '_splitShare(tuple,tuple)'(
    sharePercentage: { value: BigNumberish },
    bid: { amount: BigNumberish; currency: string; bidder: string },
    overrides?: CallOverrides
  ): Promise<BigNumber>

  acceptBid(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'acceptBid(uint256,address)'(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  addBidShares(
    tokenId: BigNumberish,
    bidShares: {
      prevOwner: { value: BigNumberish }
      creator: { value: BigNumberish }
      owner: { value: BigNumberish }
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addBidShares(uint256,tuple)'(
    tokenId: BigNumberish,
    bidShares: {
      prevOwner: { value: BigNumberish }
      creator: { value: BigNumberish }
      owner: { value: BigNumberish }
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  bidForTokenBidder(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber
    currency: string
    bidder: string
    0: BigNumber
    1: string
    2: string
  }>

  'bidForTokenBidder(uint256,address)'(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber
    currency: string
    bidder: string
    0: BigNumber
    1: string
    2: string
  }>

  bidSharesForToken(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    prevOwner: { value: BigNumber; 0: BigNumber }
    creator: { value: BigNumber; 0: BigNumber }
    owner: { value: BigNumber; 0: BigNumber }
    0: { value: BigNumber; 0: BigNumber }
    1: { value: BigNumber; 0: BigNumber }
    2: { value: BigNumber; 0: BigNumber }
  }>

  'bidSharesForToken(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    prevOwner: { value: BigNumber; 0: BigNumber }
    creator: { value: BigNumber; 0: BigNumber }
    owner: { value: BigNumber; 0: BigNumber }
    0: { value: BigNumber; 0: BigNumber }
    1: { value: BigNumber; 0: BigNumber }
    2: { value: BigNumber; 0: BigNumber }
  }>

  configure(
    tokenContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'configure(address)'(
    tokenContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  currentAskForToken(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ amount: BigNumber; currency: string; 0: BigNumber; 1: string }>

  'currentAskForToken(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{ amount: BigNumber; currency: string; 0: BigNumber; 1: string }>

  isValidBid(
    tokenId: BigNumberish,
    bidAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  'isValidBid(uint256,uint256)'(
    tokenId: BigNumberish,
    bidAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  isValidBidShares(
    bidShares: {
      prevOwner: { value: BigNumberish }
      creator: { value: BigNumberish }
      owner: { value: BigNumberish }
    },
    overrides?: CallOverrides
  ): Promise<boolean>

  'isValidBidShares(tuple)'(
    bidShares: {
      prevOwner: { value: BigNumberish }
      creator: { value: BigNumberish }
      owner: { value: BigNumberish }
    },
    overrides?: CallOverrides
  ): Promise<boolean>

  minBidForToken(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'minBidForToken(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  removeBid(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeBid(uint256,address)'(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setAsk(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setAsk(uint256,tuple)'(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setBid(
    tokenId: BigNumberish,
    bid: { amount: BigNumberish; currency: string; bidder: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setBid(uint256,tuple)'(
    tokenId: BigNumberish,
    bid: { amount: BigNumberish; currency: string; bidder: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  tokenContract(overrides?: CallOverrides): Promise<string>

  'tokenContract()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    _splitShare(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    '_splitShare(tuple,tuple)'(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    addBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<void>

    'addBidShares(uint256,tuple)'(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<void>

    bidForTokenBidder(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber
      currency: string
      bidder: string
      0: BigNumber
      1: string
      2: string
    }>

    'bidForTokenBidder(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber
      currency: string
      bidder: string
      0: BigNumber
      1: string
      2: string
    }>

    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prevOwner: { value: BigNumber; 0: BigNumber }
      creator: { value: BigNumber; 0: BigNumber }
      owner: { value: BigNumber; 0: BigNumber }
      0: { value: BigNumber; 0: BigNumber }
      1: { value: BigNumber; 0: BigNumber }
      2: { value: BigNumber; 0: BigNumber }
    }>

    'bidSharesForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      prevOwner: { value: BigNumber; 0: BigNumber }
      creator: { value: BigNumber; 0: BigNumber }
      owner: { value: BigNumber; 0: BigNumber }
      0: { value: BigNumber; 0: BigNumber }
      1: { value: BigNumber; 0: BigNumber }
      2: { value: BigNumber; 0: BigNumber }
    }>

    configure(tokenContractAddress: string, overrides?: CallOverrides): Promise<void>

    'configure(address)'(
      tokenContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    currentAskForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber
      currency: string
      0: BigNumber
      1: string
    }>

    'currentAskForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber
      currency: string
      0: BigNumber
      1: string
    }>

    isValidBid(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'isValidBid(uint256,uint256)'(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    isValidBidShares(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<boolean>

    'isValidBidShares(tuple)'(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<boolean>

    minBidForToken(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'minBidForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    'removeBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<void>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<void>

    tokenContract(overrides?: CallOverrides): Promise<string>

    'tokenContract()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    AskCreated(tokenId: null, owner: null, amount: null, currency: null): EventFilter

    BidCreated(tokenId: null, bidder: null): EventFilter
  }

  estimateGas: {
    _splitShare(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    '_splitShare(tuple,tuple)'(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    addBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    'addBidShares(uint256,tuple)'(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    bidForTokenBidder(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'bidForTokenBidder(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'bidSharesForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    configure(tokenContractAddress: string, overrides?: Overrides): Promise<BigNumber>

    'configure(address)'(
      tokenContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    currentAskForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'currentAskForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isValidBid(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'isValidBid(uint256,uint256)'(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isValidBidShares(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'isValidBidShares(tuple)'(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    minBidForToken(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'minBidForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    tokenContract(overrides?: CallOverrides): Promise<BigNumber>

    'tokenContract()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    _splitShare(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    '_splitShare(tuple,tuple)'(
      sharePercentage: { value: BigNumberish },
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    addBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addBidShares(uint256,tuple)'(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    bidForTokenBidder(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'bidForTokenBidder(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    bidSharesForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'bidSharesForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    configure(
      tokenContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'configure(address)'(
      tokenContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    currentAskForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'currentAskForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isValidBid(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isValidBid(uint256,uint256)'(
      tokenId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isValidBidShares(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isValidBidShares(tuple)'(
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    minBidForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'minBidForToken(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    tokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'tokenContract()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
