/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  BigNumber,
  BigNumberish,
  ethers,
  EventFilter,
  PopulatedTransaction,
  Signer,
} from 'ethers'
import {
  CallOverrides,
  Contract,
  ContractTransaction,
  Overrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { EventFragment, FunctionFragment, Result } from '@ethersproject/abi'

interface InvertTokenInterface extends ethers.utils.Interface {
  functions: {
    '_auctionContract()': FunctionFragment
    'acceptBid(uint256,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'auctionTransfer(uint256,address)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'baseURI()': FunctionFragment
    'burn(uint256)': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'mint(address,string,tuple)': FunctionFragment
    'name()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'previousTokenOwners(uint256)': FunctionFragment
    'removeBid(uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setAsk(uint256,tuple)': FunctionFragment
    'setBid(uint256,tuple)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'tokenByIndex(uint256)': FunctionFragment
    'tokenCreators(uint256)': FunctionFragment
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'totalSupply()': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: '_auctionContract', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'acceptBid',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'auctionTransfer',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string
  encodeFunctionData(functionFragment: 'burn', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'mint',
    values: [
      string,
      string,
      {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      }
    ]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'previousTokenOwners',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'removeBid', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setAsk',
    values: [BigNumberish, { amount: BigNumberish; currency: string }]
  ): string
  encodeFunctionData(
    functionFragment: 'setBid',
    values: [BigNumberish, { amount: BigNumberish; currency: string; bidder: string }]
  ): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'tokenByIndex', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'tokenCreators', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: '_auctionContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'acceptBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'auctionTransfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'previousTokenOwners', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAsk', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenByIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenCreators', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenOfOwnerByIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'AskCreated(uint256,address,uint256,address,uint256)': EventFragment
    'BidCreated(uint256,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AskCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BidCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export class InvertToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: InvertTokenInterface

  functions: {
    _auctionContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    '_auctionContract()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    auctionTransfer(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'auctionTransfer(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'balanceOf(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    baseURI(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'baseURI()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    burn(tokenId: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'burn(uint256)'(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    mint(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mint(address,string,tuple)'(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'name()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'ownerOf(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    previousTokenOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'previousTokenOwners(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    removeBid(tokenId: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'removeBid(uint256)'(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean
    }>

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'symbol()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'tokenByIndex(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    tokenCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'tokenCreators(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    'tokenURI(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string
    }>

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'totalSupply()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  _auctionContract(overrides?: CallOverrides): Promise<string>

  '_auctionContract()'(overrides?: CallOverrides): Promise<string>

  acceptBid(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'acceptBid(uint256,address)'(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  auctionTransfer(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'auctionTransfer(uint256,address)'(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  baseURI(overrides?: CallOverrides): Promise<string>

  'baseURI()'(overrides?: CallOverrides): Promise<string>

  burn(tokenId: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'burn(uint256)'(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  'getApproved(uint256)'(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  'isApprovedForAll(address,address)'(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  mint(
    creator: string,
    tokenURI: string,
    bidShares: {
      prevOwner: { value: BigNumberish }
      creator: { value: BigNumberish }
      owner: { value: BigNumberish }
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mint(address,string,tuple)'(
    creator: string,
    tokenURI: string,
    bidShares: {
      prevOwner: { value: BigNumberish }
      creator: { value: BigNumberish }
      owner: { value: BigNumberish }
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  'ownerOf(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  previousTokenOwners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'previousTokenOwners(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  removeBid(tokenId: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

  'removeBid(uint256)'(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setApprovalForAll(address,bool)'(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setAsk(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setAsk(uint256,tuple)'(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setBid(
    tokenId: BigNumberish,
    bid: { amount: BigNumberish; currency: string; bidder: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setBid(uint256,tuple)'(
    tokenId: BigNumberish,
    bid: { amount: BigNumberish; currency: string; bidder: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

  'supportsInterface(bytes4)'(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'tokenByIndex(uint256)'(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  tokenCreators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'tokenCreators(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'tokenOfOwnerByIndex(address,uint256)'(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  'tokenURI(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    _auctionContract(overrides?: CallOverrides): Promise<string>

    '_auctionContract()'(overrides?: CallOverrides): Promise<string>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    auctionTransfer(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    'auctionTransfer(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    baseURI(overrides?: CallOverrides): Promise<string>

    'baseURI()'(overrides?: CallOverrides): Promise<string>

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    'burn(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    mint(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<void>

    'mint(address,string,tuple)'(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    'ownerOf(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    previousTokenOwners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'previousTokenOwners(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    removeBid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    'removeBid(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<void>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'tokenByIndex(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenCreators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'tokenCreators(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    'tokenURI(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter

    AskCreated(
      tokenId: null,
      owner: null,
      amount: null,
      currency: null,
      currencyDecimals: null
    ): EventFilter

    BidCreated(tokenId: null, bidder: null): EventFilter

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter
  }

  estimateGas: {
    _auctionContract(overrides?: CallOverrides): Promise<BigNumber>

    '_auctionContract()'(overrides?: CallOverrides): Promise<BigNumber>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    approve(to: string, tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    auctionTransfer(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'auctionTransfer(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    baseURI(overrides?: CallOverrides): Promise<BigNumber>

    'baseURI()'(overrides?: CallOverrides): Promise<BigNumber>

    burn(tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'burn(uint256)'(tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    mint(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    'mint(address,string,tuple)'(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'ownerOf(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    previousTokenOwners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'previousTokenOwners(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    removeBid(tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'removeBid(uint256)'(tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'tokenByIndex(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenCreators(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'tokenCreators(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'tokenURI(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    _auctionContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    '_auctionContract()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    acceptBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'acceptBid(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    auctionTransfer(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'auctionTransfer(uint256,address)'(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'baseURI()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    burn(tokenId: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'burn(uint256)'(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getApproved(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mint(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mint(address,string,tuple)'(
      creator: string,
      tokenURI: string,
      bidShares: {
        prevOwner: { value: BigNumberish }
        creator: { value: BigNumberish }
        owner: { value: BigNumberish }
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'ownerOf(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    previousTokenOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'previousTokenOwners(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    removeBid(tokenId: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

    'removeBid(uint256)'(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setAsk(uint256,tuple)'(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setBid(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setBid(uint256,tuple)'(
      tokenId: BigNumberish,
      bid: { amount: BigNumberish; currency: string; bidder: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokenByIndex(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokenCreators(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokenURI(uint256)'(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
